name: Build/Push Cart api

on:
  pull_request:
    branches:
      - main
    paths:
      - Source/Services/Tailwind.Traders.Cart.Api/**

env:
  # azure
  resourceGroup: ado30jd

  # path prefix
  tailwindChartValuesScript: Deploy/helm-values/generate-config.ps1

jobs:
  build:
    runs-on: ubuntu-16.04
    steps:
      - name: "Checkout main branch"
        uses: actions/checkout@main

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Create Helm gvalues file"
        run: |
          pwsh $tailwindChartValuesScript -resourceGroup $resourceGroup -outputFile values.yaml

      - name: "Get ACR Container Information"
        run: |
          echo "Retrieving Container Registry info..."

          acrName=$(az acr list -g $resourceGroup -o tsv --query [0].name)
          CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)

          # acr/container registry variables
          echo "::set-env name=CONTAINER_REGISTRY::$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)"

          echo "::set-env name=REGISTRY_USERNAME::$(az acr credential show -n $acrName --query username -o tsv)"
          echo "::set-env name=REGISTRY_PASSWORD::$(az acr credential show -n $acrName -o tsv --query passwords[0].value)"

          echo "::set-env name=dPath::$GITHUB_WORKSPACE/TailwindTraders-Backend/Source"

          echo "::set-env name=pictures::$(az storage account list -g $resourceGroup --query [0].primaryEndpoints.blob -o tsv)"

      # docker login
      - name: "docker login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: "docker build/push"
        run: |
          docker build Source/Services/Tailwind.Traders.Cart.Api/ -t $CONTAINER_REGISTRY/cart.api:$GITHUB_SHA
          docker push $CONTAINER_REGISTRY/cart.api:$GITHUB_SHA
      # - uses: azure/aks-set-context@v1
      #   with:
      #     creds: "${{ secrets.AZURE_CREDENTIALS }}"
      #     cluster-name: ${{ env.CLUSTER_NAME }}
      #     resource-group: ${{ env.RESOURCE_GROUP }}
      # - name: Create child namespaces and add Dev Spaces labels
      #   run: |
      #     if [ -n "$(kubectl get namespace $GITHUB_HEAD_REF --ignore-not-found -o name)" ]; then exit 0; fi
      #     kubectl create namespace $GITHUB_HEAD_REF
      #     kubectl label namespace $GITHUB_HEAD_REF azds.io/parent-space=${{ secrets.MASTER_SPACE }}
      #     kubectl label namespace $GITHUB_HEAD_REF azds.io/space=true
      #     kubectl label namespace $GITHUB_HEAD_REF azds.io/pull-request-space=true
      # - name: Set imagePullSecret
      #   uses: azure/k8s-create-secret@v1
      #   with:
      #     namespace: ${{ github.head_ref }}
      #     container-registry-url: ${{ env.CONTAINER_REGISTRY }}
      #     container-registry-username: ${{ env.REGISTRY_USERNAME }}
      #     container-registry-password: ${{ env.REGISTRY_PASSWORD }}
      #     secret-name: "twt-cart-cr"
      #   id: create-secret
      # - name: Helm Install PR
      #   run: |
      #     cd Deploy/helm
      #     helm upgrade --install --namespace $GITHUB_HEAD_REF rpsls-node-$GITHUB_HEAD_REF node-player \
      #       -f gvalues.yml \
      #       --set image.repository=${{ secrets.CONTAINER_REGISTRY }}/node-player \
      #       --set image.tag=$GITHUB_SHA \
      #       --set imageCredentials.registry=${{ secrets.CONTAINER_REGISTRY }} \
      #       --set imageCredentials.username=${{ secrets.REGISTRY_USERNAME }} \
      #       --set imageCredentials.password=${{ secrets.REGISTRY_PASSWORD }} \
      #       --set ingress.hosts[0]=$GITHUB_HEAD_REF.s.${{ secrets.HOST }}
      # - uses: azure/dev-spaces/actions/add-review-url@Releases/v1
      #   with:
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     host: ${{ secrets.HOST }}
